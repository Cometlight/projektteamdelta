package at.itb13.oculus.presentation.model;

import java.util.HashSet;
import java.util.Set;

import javafx.beans.property.IntegerProperty;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleObjectProperty;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import at.itb13.oculus.domain.Calendar;
import at.itb13.oculus.domain.Diagnosis;
import at.itb13.oculus.domain.Doctor;
import at.itb13.oculus.domain.Patient;
import at.itb13.oculus.domain.Queue;
import at.itb13.oculus.domain.User;
import at.itb13.oculus.technicalServices.ReloaderOLD_TODELETE;

/**
 * Doctor generated by hbm2java
 */
@Entity
@Table(name = "doctor", catalog = "oculusdb")
public class DoctorWithProperties implements java.io.Serializable {

	private static final Logger _logger = LogManager.getLogger(DoctorWithProperties.class
			.getName());
	private static final long serialVersionUID = 1L;
	private SimpleIntegerProperty _doctorId;
	private SimpleObjectProperty<Calendar> _calendar;
	private SimpleObjectProperty<DoctorWithProperties> _doctorSubstitute;
	private SimpleObjectProperty<User> _user;
	private SimpleObjectProperty<Queue> _queue;
	private Set<Diagnosis> _diagnoses = new HashSet<Diagnosis>(0);
	private Set<Patient> _patients = new HashSet<Patient>(0);
	private Doctor _doctor;

	public DoctorWithProperties() {
	}
	public DoctorWithProperties(Doctor d){
		_doctor = d;
		_doctorId = new SimpleIntegerProperty(d.getDoctorId());
		_calendar = new SimpleObjectProperty<Calendar>(_doctor.getCalendar());
	//	_doctorSubstitute = new SimpleObjectProperty<DoctorWithProperties>(new DoctorWithProperties(_doctor.getDoctorSubstitute()));
		_user = new SimpleObjectProperty<User>(_doctor.getUser());
	}

	public DoctorWithProperties(Calendar calendar) {
		_calendar = new SimpleObjectProperty<>(calendar);
	}

	public DoctorWithProperties(Calendar calendar, DoctorWithProperties doctorSubstitute, User user,
			Queue queue, Set<Diagnosis> diagnosises,
			Set<Patient> patients) {
		_calendar = new SimpleObjectProperty<>(calendar);
		_doctorSubstitute = new SimpleObjectProperty<>(doctorSubstitute);
		_user = new SimpleObjectProperty<>(user);
		_queue = new SimpleObjectProperty<>(queue);
	//	_diagnoses = new SimpleObjectProperty<>(diagnosises);
	//	_patients = new Sipatients;
	}

	
	public Integer getDoctorId() {
		return _doctor.getDoctorId();
	}

	public void setDoctorId(Integer doctorId) {
		_doctor.setDoctorId(doctorId);
		_doctorId.set(doctorId);
	}

	public Calendar getCalendar() {
		return _doctor.getCalendar();
	}

	public void setCalendar(Calendar calendar) {
		_doctor.setCalendar(calendar);
		_calendar.set(calendar);
	}
	public ObjectProperty<Calendar> CalendarProperty(){
		return _calendar;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "doctorIdSubstitute")
	public DoctorWithProperties getDoctorSubstitute() {
		return _doctorSubstitute.get();
	}

	public void setDoctorSubstitute(DoctorWithProperties doctor) {
		_doctorSubstitute.set(doctor);
	}
	
	public ObjectProperty<DoctorWithProperties> DoctorSubstituteProperty(){
		return _doctorSubstitute;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "userId")
	public User getUser() {
//		if(!Reloader.getInstance().isLoaded(_user)) { TODO: DELETE
//			_user = Reloader.getInstance().reload(User.class, _user.getUserId());
//		}
		return _doctor.getUser();
	}

	public void setUser(User user) {
		_doctor.setUser(user);
		_user.set(user);
	}
	public ObjectProperty<User> UserProperty(){
		return _user;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "doctor")
	public Set<Diagnosis> getDiagnoses() {
		return this._diagnoses;
	}

	public void setDiagnoses(Set<Diagnosis> diagnoses) {
		this._diagnoses = diagnoses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "doctor")
	public Set<Patient> getPatients() {
		return this._patients;
	}

	public void setPatients(Set<Patient> patients) {
		this._patients = patients;
	}

}
