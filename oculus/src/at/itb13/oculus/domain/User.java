package at.itb13.oculus.domain;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "oculusdb")
public class User implements java.io.Serializable {

	private static final Logger _logger = LogManager.getLogger(User.class
			.getName());
	private static final long serialVersionUID = 1L;
	private Integer userId;
	private UserGroup usergroup;
	private String userName;
	private String password;
	private String title;
	private String firstName;
	private String lastName;
	private String email;
	private Date createDate;
	private Date idleDate;
	
	//TODO Delete commented lines
	
//	private Set<Doctor> doctors = new HashSet<Doctor>(0);
//	private Set<Orthoptist> orthoptists = new HashSet<Orthoptist>(0);
	private Set<UserPermission> userpermissions = new HashSet<UserPermission>(0);
//	private Set<Administrator> administrators = new HashSet<Administrator>(0);
	private Set<ExaminationResult> examinationresults = new HashSet<ExaminationResult>(
			0);
//	private Set<Receptionist> receptionists = new HashSet<Receptionist>(0);
	private Set<ExaminationProtocol> examinationprotocols = new HashSet<ExaminationProtocol>(
			0);

	public User() {
	}

	public User(String userName, String password, String firstName,
			String lastName, Date createDate) {
		this.userName = userName;
		this.password = password;
		this.firstName = firstName;
		this.lastName = lastName;
		this.createDate = createDate;
	}

	public User(UserGroup usergroup, String userName, String password,
			String title, String firstName, String lastName, String email,
			Date createDate, Date idleDate, Set<Doctor> doctors,
			Set<Orthoptist> orthoptists, Set<UserPermission> userpermissions,
			Set<Administrator> administrators,
			Set<ExaminationResult> examinationresults,
			Set<Receptionist> receptionists,
			Set<ExaminationProtocol> examinationprotocols) {
		this.usergroup = usergroup;
		this.userName = userName;
		this.password = password;
		this.title = title;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.createDate = createDate;
		this.idleDate = idleDate;
//		this.doctors = doctors;
//		this.orthoptists = orthoptists;
		this.userpermissions = userpermissions;
//		this.administrators = administrators;
		this.examinationresults = examinationresults;
//		this.receptionists = receptionists;
		this.examinationprotocols = examinationprotocols;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "userId", unique = true, nullable = false)
	public Integer getUserId() {
		return this.userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "userGroupId")
	public UserGroup getUsergroup() {
		return this.usergroup;
	}

	public void setUsergroup(UserGroup usergroup) {
		this.usergroup = usergroup;
	}

	@Column(name = "userName", nullable = false, length = 30)
	public String getUserName() {
		return this.userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	@Column(name = "password", nullable = false)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "title", length = 30)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "firstName", nullable = false, length = 50)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "lastName", nullable = false, length = 50)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "email")
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "createDate", nullable = false, length = 19)
	public Date getCreateDate() {
		return this.createDate;
	}

	public void setCreateDate(Date createDate) {
		this.createDate = createDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "idleDate", length = 19)
	public Date getIdleDate() {
		return this.idleDate;
	}

	public void setIdleDate(Date idleDate) {
		this.idleDate = idleDate;
	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
//	public Set<Doctor> getDoctors() {
//		return this.doctors;
//	}
//
//	public void setDoctors(Set<Doctor> doctors) {
//		this.doctors = doctors;
//	}
//
//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
//	public Set<Orthoptist> getOrthoptists() {
//		return this.orthoptists;
//	}
//
//	public void setOrthoptists(Set<Orthoptist> orthoptists) {
//		this.orthoptists = orthoptists;
//	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserPermission> getUserpermissions() {
		return this.userpermissions;
	}

	public void setUserpermissions(Set<UserPermission> userpermissions) {
		this.userpermissions = userpermissions;
	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
//	public Set<Administrator> getAdministrators() {
//		return this.administrators;
//	}
//
//	public void setAdministrators(Set<Administrator> administrators) {
//		this.administrators = administrators;
//	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<ExaminationResult> getExaminationresults() {
		return this.examinationresults;
	}

	public void setExaminationresults(Set<ExaminationResult> examinationresults) {
		this.examinationresults = examinationresults;
	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
//	public Set<Receptionist> getReceptionists() {
//		return this.receptionists;
//	}
//
//	public void setReceptionists(Set<Receptionist> receptionists) {
//		this.receptionists = receptionists;
//	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<ExaminationProtocol> getExaminationprotocols() {
		return this.examinationprotocols;
	}

	public void setExaminationprotocols(
			Set<ExaminationProtocol> examinationprotocols) {
		this.examinationprotocols = examinationprotocols;
	}

}
